// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ManualControlSetpoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "ManualControlSetpoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>










px4_msgs::msg::ManualControlSetpoint::ManualControlSetpoint()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1ee807c6
    m_timestamp = 0;
    // m_timestamp_sample com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76a4d6c
    m_timestamp_sample = 0;
    // m_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@517cd4b
    m_valid = false;
    // m_data_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6cc7b4de
    m_data_source = 0;
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32cf48b7
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@679b62af
    m_y = 0.0;
    // m_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5cdd8682
    m_z = 0.0;
    // m_r com.eprosima.idl.parser.typecode.PrimitiveTypeCode@d6da883
    m_r = 0.0;
    // m_flaps com.eprosima.idl.parser.typecode.PrimitiveTypeCode@45afc369
    m_flaps = 0.0;
    // m_aux1 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@799d4f69
    m_aux1 = 0.0;
    // m_aux2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@49c43f4e
    m_aux2 = 0.0;
    // m_aux3 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@290dbf45
    m_aux3 = 0.0;
    // m_aux4 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12028586
    m_aux4 = 0.0;
    // m_aux5 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17776a8
    m_aux5 = 0.0;
    // m_aux6 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69a10787
    m_aux6 = 0.0;
    // m_sticks_moving com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2d127a61
    m_sticks_moving = false;

}

px4_msgs::msg::ManualControlSetpoint::~ManualControlSetpoint()
{
















}

px4_msgs::msg::ManualControlSetpoint::ManualControlSetpoint(const ManualControlSetpoint &x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_valid = x.m_valid;
    m_data_source = x.m_data_source;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_r = x.m_r;
    m_flaps = x.m_flaps;
    m_aux1 = x.m_aux1;
    m_aux2 = x.m_aux2;
    m_aux3 = x.m_aux3;
    m_aux4 = x.m_aux4;
    m_aux5 = x.m_aux5;
    m_aux6 = x.m_aux6;
    m_sticks_moving = x.m_sticks_moving;
}

px4_msgs::msg::ManualControlSetpoint::ManualControlSetpoint(ManualControlSetpoint &&x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_valid = x.m_valid;
    m_data_source = x.m_data_source;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_r = x.m_r;
    m_flaps = x.m_flaps;
    m_aux1 = x.m_aux1;
    m_aux2 = x.m_aux2;
    m_aux3 = x.m_aux3;
    m_aux4 = x.m_aux4;
    m_aux5 = x.m_aux5;
    m_aux6 = x.m_aux6;
    m_sticks_moving = x.m_sticks_moving;
}

px4_msgs::msg::ManualControlSetpoint& px4_msgs::msg::ManualControlSetpoint::operator=(const ManualControlSetpoint &x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_valid = x.m_valid;
    m_data_source = x.m_data_source;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_r = x.m_r;
    m_flaps = x.m_flaps;
    m_aux1 = x.m_aux1;
    m_aux2 = x.m_aux2;
    m_aux3 = x.m_aux3;
    m_aux4 = x.m_aux4;
    m_aux5 = x.m_aux5;
    m_aux6 = x.m_aux6;
    m_sticks_moving = x.m_sticks_moving;

    return *this;
}

px4_msgs::msg::ManualControlSetpoint& px4_msgs::msg::ManualControlSetpoint::operator=(ManualControlSetpoint &&x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_valid = x.m_valid;
    m_data_source = x.m_data_source;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_r = x.m_r;
    m_flaps = x.m_flaps;
    m_aux1 = x.m_aux1;
    m_aux2 = x.m_aux2;
    m_aux3 = x.m_aux3;
    m_aux4 = x.m_aux4;
    m_aux5 = x.m_aux5;
    m_aux6 = x.m_aux6;
    m_sticks_moving = x.m_sticks_moving;

    return *this;
}

size_t px4_msgs::msg::ManualControlSetpoint::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::ManualControlSetpoint::getCdrSerializedSize(const px4_msgs::msg::ManualControlSetpoint& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::ManualControlSetpoint::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_timestamp_sample;
    scdr << m_valid;
    scdr << m_data_source;
    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
    scdr << m_r;
    scdr << m_flaps;
    scdr << m_aux1;
    scdr << m_aux2;
    scdr << m_aux3;
    scdr << m_aux4;
    scdr << m_aux5;
    scdr << m_aux6;
    scdr << m_sticks_moving;
}

void px4_msgs::msg::ManualControlSetpoint::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_timestamp_sample;
    dcdr >> m_valid;
    dcdr >> m_data_source;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
    dcdr >> m_r;
    dcdr >> m_flaps;
    dcdr >> m_aux1;
    dcdr >> m_aux2;
    dcdr >> m_aux3;
    dcdr >> m_aux4;
    dcdr >> m_aux5;
    dcdr >> m_aux6;
    dcdr >> m_sticks_moving;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::ManualControlSetpoint::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::ManualControlSetpoint::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::ManualControlSetpoint::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member timestamp_sample
 * @param _timestamp_sample New value for member timestamp_sample
 */
void px4_msgs::msg::ManualControlSetpoint::timestamp_sample(uint64_t _timestamp_sample)
{
m_timestamp_sample = _timestamp_sample;
}

/*!
 * @brief This function returns the value of member timestamp_sample
 * @return Value of member timestamp_sample
 */
uint64_t px4_msgs::msg::ManualControlSetpoint::timestamp_sample() const
{
    return m_timestamp_sample;
}

/*!
 * @brief This function returns a reference to member timestamp_sample
 * @return Reference to member timestamp_sample
 */
uint64_t& px4_msgs::msg::ManualControlSetpoint::timestamp_sample()
{
    return m_timestamp_sample;
}

/*!
 * @brief This function sets a value in member valid
 * @param _valid New value for member valid
 */
void px4_msgs::msg::ManualControlSetpoint::valid(bool _valid)
{
m_valid = _valid;
}

/*!
 * @brief This function returns the value of member valid
 * @return Value of member valid
 */
bool px4_msgs::msg::ManualControlSetpoint::valid() const
{
    return m_valid;
}

/*!
 * @brief This function returns a reference to member valid
 * @return Reference to member valid
 */
bool& px4_msgs::msg::ManualControlSetpoint::valid()
{
    return m_valid;
}

/*!
 * @brief This function sets a value in member data_source
 * @param _data_source New value for member data_source
 */
void px4_msgs::msg::ManualControlSetpoint::data_source(uint8_t _data_source)
{
m_data_source = _data_source;
}

/*!
 * @brief This function returns the value of member data_source
 * @return Value of member data_source
 */
uint8_t px4_msgs::msg::ManualControlSetpoint::data_source() const
{
    return m_data_source;
}

/*!
 * @brief This function returns a reference to member data_source
 * @return Reference to member data_source
 */
uint8_t& px4_msgs::msg::ManualControlSetpoint::data_source()
{
    return m_data_source;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void px4_msgs::msg::ManualControlSetpoint::x(float _x)
{
m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float px4_msgs::msg::ManualControlSetpoint::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& px4_msgs::msg::ManualControlSetpoint::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void px4_msgs::msg::ManualControlSetpoint::y(float _y)
{
m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float px4_msgs::msg::ManualControlSetpoint::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& px4_msgs::msg::ManualControlSetpoint::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void px4_msgs::msg::ManualControlSetpoint::z(float _z)
{
m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
float px4_msgs::msg::ManualControlSetpoint::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
float& px4_msgs::msg::ManualControlSetpoint::z()
{
    return m_z;
}

/*!
 * @brief This function sets a value in member r
 * @param _r New value for member r
 */
void px4_msgs::msg::ManualControlSetpoint::r(float _r)
{
m_r = _r;
}

/*!
 * @brief This function returns the value of member r
 * @return Value of member r
 */
float px4_msgs::msg::ManualControlSetpoint::r() const
{
    return m_r;
}

/*!
 * @brief This function returns a reference to member r
 * @return Reference to member r
 */
float& px4_msgs::msg::ManualControlSetpoint::r()
{
    return m_r;
}

/*!
 * @brief This function sets a value in member flaps
 * @param _flaps New value for member flaps
 */
void px4_msgs::msg::ManualControlSetpoint::flaps(float _flaps)
{
m_flaps = _flaps;
}

/*!
 * @brief This function returns the value of member flaps
 * @return Value of member flaps
 */
float px4_msgs::msg::ManualControlSetpoint::flaps() const
{
    return m_flaps;
}

/*!
 * @brief This function returns a reference to member flaps
 * @return Reference to member flaps
 */
float& px4_msgs::msg::ManualControlSetpoint::flaps()
{
    return m_flaps;
}

/*!
 * @brief This function sets a value in member aux1
 * @param _aux1 New value for member aux1
 */
void px4_msgs::msg::ManualControlSetpoint::aux1(float _aux1)
{
m_aux1 = _aux1;
}

/*!
 * @brief This function returns the value of member aux1
 * @return Value of member aux1
 */
float px4_msgs::msg::ManualControlSetpoint::aux1() const
{
    return m_aux1;
}

/*!
 * @brief This function returns a reference to member aux1
 * @return Reference to member aux1
 */
float& px4_msgs::msg::ManualControlSetpoint::aux1()
{
    return m_aux1;
}

/*!
 * @brief This function sets a value in member aux2
 * @param _aux2 New value for member aux2
 */
void px4_msgs::msg::ManualControlSetpoint::aux2(float _aux2)
{
m_aux2 = _aux2;
}

/*!
 * @brief This function returns the value of member aux2
 * @return Value of member aux2
 */
float px4_msgs::msg::ManualControlSetpoint::aux2() const
{
    return m_aux2;
}

/*!
 * @brief This function returns a reference to member aux2
 * @return Reference to member aux2
 */
float& px4_msgs::msg::ManualControlSetpoint::aux2()
{
    return m_aux2;
}

/*!
 * @brief This function sets a value in member aux3
 * @param _aux3 New value for member aux3
 */
void px4_msgs::msg::ManualControlSetpoint::aux3(float _aux3)
{
m_aux3 = _aux3;
}

/*!
 * @brief This function returns the value of member aux3
 * @return Value of member aux3
 */
float px4_msgs::msg::ManualControlSetpoint::aux3() const
{
    return m_aux3;
}

/*!
 * @brief This function returns a reference to member aux3
 * @return Reference to member aux3
 */
float& px4_msgs::msg::ManualControlSetpoint::aux3()
{
    return m_aux3;
}

/*!
 * @brief This function sets a value in member aux4
 * @param _aux4 New value for member aux4
 */
void px4_msgs::msg::ManualControlSetpoint::aux4(float _aux4)
{
m_aux4 = _aux4;
}

/*!
 * @brief This function returns the value of member aux4
 * @return Value of member aux4
 */
float px4_msgs::msg::ManualControlSetpoint::aux4() const
{
    return m_aux4;
}

/*!
 * @brief This function returns a reference to member aux4
 * @return Reference to member aux4
 */
float& px4_msgs::msg::ManualControlSetpoint::aux4()
{
    return m_aux4;
}

/*!
 * @brief This function sets a value in member aux5
 * @param _aux5 New value for member aux5
 */
void px4_msgs::msg::ManualControlSetpoint::aux5(float _aux5)
{
m_aux5 = _aux5;
}

/*!
 * @brief This function returns the value of member aux5
 * @return Value of member aux5
 */
float px4_msgs::msg::ManualControlSetpoint::aux5() const
{
    return m_aux5;
}

/*!
 * @brief This function returns a reference to member aux5
 * @return Reference to member aux5
 */
float& px4_msgs::msg::ManualControlSetpoint::aux5()
{
    return m_aux5;
}

/*!
 * @brief This function sets a value in member aux6
 * @param _aux6 New value for member aux6
 */
void px4_msgs::msg::ManualControlSetpoint::aux6(float _aux6)
{
m_aux6 = _aux6;
}

/*!
 * @brief This function returns the value of member aux6
 * @return Value of member aux6
 */
float px4_msgs::msg::ManualControlSetpoint::aux6() const
{
    return m_aux6;
}

/*!
 * @brief This function returns a reference to member aux6
 * @return Reference to member aux6
 */
float& px4_msgs::msg::ManualControlSetpoint::aux6()
{
    return m_aux6;
}

/*!
 * @brief This function sets a value in member sticks_moving
 * @param _sticks_moving New value for member sticks_moving
 */
void px4_msgs::msg::ManualControlSetpoint::sticks_moving(bool _sticks_moving)
{
m_sticks_moving = _sticks_moving;
}

/*!
 * @brief This function returns the value of member sticks_moving
 * @return Value of member sticks_moving
 */
bool px4_msgs::msg::ManualControlSetpoint::sticks_moving() const
{
    return m_sticks_moving;
}

/*!
 * @brief This function returns a reference to member sticks_moving
 * @return Reference to member sticks_moving
 */
bool& px4_msgs::msg::ManualControlSetpoint::sticks_moving()
{
    return m_sticks_moving;
}


size_t px4_msgs::msg::ManualControlSetpoint::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



















    return current_align;
}

bool px4_msgs::msg::ManualControlSetpoint::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::ManualControlSetpoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}


