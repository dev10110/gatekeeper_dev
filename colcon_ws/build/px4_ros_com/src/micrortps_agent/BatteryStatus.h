// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BatteryStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_BATTERYSTATUS_H_
#define _PX4_MSGS_MSG_BATTERYSTATUS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BatteryStatus_SOURCE)
#define BatteryStatus_DllAPI __declspec( dllexport )
#else
#define BatteryStatus_DllAPI __declspec( dllimport )
#endif // BatteryStatus_SOURCE
#else
#define BatteryStatus_DllAPI
#endif
#else
#define BatteryStatus_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        typedef std::array<float, 14> float__14;
        namespace BatteryStatus_Constants
        {
            const uint8_t BATTERY_SOURCE_POWER_MODULE = 0;
            const uint8_t BATTERY_SOURCE_EXTERNAL = 1;
            const uint8_t BATTERY_SOURCE_ESCS = 2;
            const uint8_t BATTERY_WARNING_NONE = 0;
            const uint8_t BATTERY_WARNING_LOW = 1;
            const uint8_t BATTERY_WARNING_CRITICAL = 2;
            const uint8_t BATTERY_WARNING_EMERGENCY = 3;
            const uint8_t BATTERY_WARNING_FAILED = 4;
            const uint8_t BATTERY_STATE_UNHEALTHY = 6;
            const uint8_t BATTERY_STATE_CHARGING = 7;
            const uint8_t BATTERY_FAULT_DEEP_DISCHARGE = 0;
            const uint8_t BATTERY_FAULT_SPIKES = 1;
            const uint8_t BATTERY_FAULT_CELL_FAIL = 2;
            const uint8_t BATTERY_FAULT_OVER_CURRENT = 3;
            const uint8_t BATTERY_FAULT_OVER_TEMPERATURE = 4;
            const uint8_t BATTERY_FAULT_UNDER_TEMPERATURE = 5;
            const uint8_t BATTERY_FAULT_INCOMPATIBLE_VOLTAGE = 6;
            const uint8_t BATTERY_FAULT_INCOMPATIBLE_FIRMWARE = 7;
            const uint8_t BATTERY_FAULT_INCOMPATIBLE_MODEL = 8;
            const uint8_t BATTERY_FAULT_HARDWARE_FAILURE = 9;
            const uint8_t BATTERY_WARNING_OVER_TEMPERATURE = 10;
            const uint8_t BATTERY_FAULT_COUNT = 11;
            const uint8_t BATTERY_MODE_UNKNOWN = 0;
            const uint8_t BATTERY_MODE_AUTO_DISCHARGING = 1;
            const uint8_t BATTERY_MODE_HOT_SWAP = 2;
            const uint8_t BATTERY_MODE_COUNT = 3;
            const uint8_t MAX_INSTANCES = 4;
        }
        /*!
         * @brief This class represents the structure BatteryStatus defined by the user in the IDL file.
         * @ingroup BATTERYSTATUS
         */
        class BatteryStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BatteryStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BatteryStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::BatteryStatus that will be copied.
             */
            eProsima_user_DllExport BatteryStatus(const BatteryStatus &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::BatteryStatus that will be copied.
             */
            eProsima_user_DllExport BatteryStatus(BatteryStatus &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::BatteryStatus that will be copied.
             */
            eProsima_user_DllExport BatteryStatus& operator=(const BatteryStatus &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::BatteryStatus that will be copied.
             */
            eProsima_user_DllExport BatteryStatus& operator=(BatteryStatus &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member connected
             * @param _connected New value for member connected
             */
            eProsima_user_DllExport void connected(bool _connected);

            /*!
             * @brief This function returns the value of member connected
             * @return Value of member connected
             */
            eProsima_user_DllExport bool connected() const;

            /*!
             * @brief This function returns a reference to member connected
             * @return Reference to member connected
             */
            eProsima_user_DllExport bool& connected();

            /*!
             * @brief This function sets a value in member voltage_v
             * @param _voltage_v New value for member voltage_v
             */
            eProsima_user_DllExport void voltage_v(float _voltage_v);

            /*!
             * @brief This function returns the value of member voltage_v
             * @return Value of member voltage_v
             */
            eProsima_user_DllExport float voltage_v() const;

            /*!
             * @brief This function returns a reference to member voltage_v
             * @return Reference to member voltage_v
             */
            eProsima_user_DllExport float& voltage_v();

            /*!
             * @brief This function sets a value in member voltage_filtered_v
             * @param _voltage_filtered_v New value for member voltage_filtered_v
             */
            eProsima_user_DllExport void voltage_filtered_v(float _voltage_filtered_v);

            /*!
             * @brief This function returns the value of member voltage_filtered_v
             * @return Value of member voltage_filtered_v
             */
            eProsima_user_DllExport float voltage_filtered_v() const;

            /*!
             * @brief This function returns a reference to member voltage_filtered_v
             * @return Reference to member voltage_filtered_v
             */
            eProsima_user_DllExport float& voltage_filtered_v();

            /*!
             * @brief This function sets a value in member current_a
             * @param _current_a New value for member current_a
             */
            eProsima_user_DllExport void current_a(float _current_a);

            /*!
             * @brief This function returns the value of member current_a
             * @return Value of member current_a
             */
            eProsima_user_DllExport float current_a() const;

            /*!
             * @brief This function returns a reference to member current_a
             * @return Reference to member current_a
             */
            eProsima_user_DllExport float& current_a();

            /*!
             * @brief This function sets a value in member current_filtered_a
             * @param _current_filtered_a New value for member current_filtered_a
             */
            eProsima_user_DllExport void current_filtered_a(float _current_filtered_a);

            /*!
             * @brief This function returns the value of member current_filtered_a
             * @return Value of member current_filtered_a
             */
            eProsima_user_DllExport float current_filtered_a() const;

            /*!
             * @brief This function returns a reference to member current_filtered_a
             * @return Reference to member current_filtered_a
             */
            eProsima_user_DllExport float& current_filtered_a();

            /*!
             * @brief This function sets a value in member current_average_a
             * @param _current_average_a New value for member current_average_a
             */
            eProsima_user_DllExport void current_average_a(float _current_average_a);

            /*!
             * @brief This function returns the value of member current_average_a
             * @return Value of member current_average_a
             */
            eProsima_user_DllExport float current_average_a() const;

            /*!
             * @brief This function returns a reference to member current_average_a
             * @return Reference to member current_average_a
             */
            eProsima_user_DllExport float& current_average_a();

            /*!
             * @brief This function sets a value in member discharged_mah
             * @param _discharged_mah New value for member discharged_mah
             */
            eProsima_user_DllExport void discharged_mah(float _discharged_mah);

            /*!
             * @brief This function returns the value of member discharged_mah
             * @return Value of member discharged_mah
             */
            eProsima_user_DllExport float discharged_mah() const;

            /*!
             * @brief This function returns a reference to member discharged_mah
             * @return Reference to member discharged_mah
             */
            eProsima_user_DllExport float& discharged_mah();

            /*!
             * @brief This function sets a value in member remaining
             * @param _remaining New value for member remaining
             */
            eProsima_user_DllExport void remaining(float _remaining);

            /*!
             * @brief This function returns the value of member remaining
             * @return Value of member remaining
             */
            eProsima_user_DllExport float remaining() const;

            /*!
             * @brief This function returns a reference to member remaining
             * @return Reference to member remaining
             */
            eProsima_user_DllExport float& remaining();

            /*!
             * @brief This function sets a value in member scale
             * @param _scale New value for member scale
             */
            eProsima_user_DllExport void scale(float _scale);

            /*!
             * @brief This function returns the value of member scale
             * @return Value of member scale
             */
            eProsima_user_DllExport float scale() const;

            /*!
             * @brief This function returns a reference to member scale
             * @return Reference to member scale
             */
            eProsima_user_DllExport float& scale();

            /*!
             * @brief This function sets a value in member time_remaining_s
             * @param _time_remaining_s New value for member time_remaining_s
             */
            eProsima_user_DllExport void time_remaining_s(float _time_remaining_s);

            /*!
             * @brief This function returns the value of member time_remaining_s
             * @return Value of member time_remaining_s
             */
            eProsima_user_DllExport float time_remaining_s() const;

            /*!
             * @brief This function returns a reference to member time_remaining_s
             * @return Reference to member time_remaining_s
             */
            eProsima_user_DllExport float& time_remaining_s();

            /*!
             * @brief This function sets a value in member temperature
             * @param _temperature New value for member temperature
             */
            eProsima_user_DllExport void temperature(float _temperature);

            /*!
             * @brief This function returns the value of member temperature
             * @return Value of member temperature
             */
            eProsima_user_DllExport float temperature() const;

            /*!
             * @brief This function returns a reference to member temperature
             * @return Reference to member temperature
             */
            eProsima_user_DllExport float& temperature();

            /*!
             * @brief This function sets a value in member cell_count
             * @param _cell_count New value for member cell_count
             */
            eProsima_user_DllExport void cell_count(uint8_t _cell_count);

            /*!
             * @brief This function returns the value of member cell_count
             * @return Value of member cell_count
             */
            eProsima_user_DllExport uint8_t cell_count() const;

            /*!
             * @brief This function returns a reference to member cell_count
             * @return Reference to member cell_count
             */
            eProsima_user_DllExport uint8_t& cell_count();

            /*!
             * @brief This function sets a value in member source
             * @param _source New value for member source
             */
            eProsima_user_DllExport void source(uint8_t _source);

            /*!
             * @brief This function returns the value of member source
             * @return Value of member source
             */
            eProsima_user_DllExport uint8_t source() const;

            /*!
             * @brief This function returns a reference to member source
             * @return Reference to member source
             */
            eProsima_user_DllExport uint8_t& source();

            /*!
             * @brief This function sets a value in member priority
             * @param _priority New value for member priority
             */
            eProsima_user_DllExport void priority(uint8_t _priority);

            /*!
             * @brief This function returns the value of member priority
             * @return Value of member priority
             */
            eProsima_user_DllExport uint8_t priority() const;

            /*!
             * @brief This function returns a reference to member priority
             * @return Reference to member priority
             */
            eProsima_user_DllExport uint8_t& priority();

            /*!
             * @brief This function sets a value in member capacity
             * @param _capacity New value for member capacity
             */
            eProsima_user_DllExport void capacity(uint16_t _capacity);

            /*!
             * @brief This function returns the value of member capacity
             * @return Value of member capacity
             */
            eProsima_user_DllExport uint16_t capacity() const;

            /*!
             * @brief This function returns a reference to member capacity
             * @return Reference to member capacity
             */
            eProsima_user_DllExport uint16_t& capacity();

            /*!
             * @brief This function sets a value in member cycle_count
             * @param _cycle_count New value for member cycle_count
             */
            eProsima_user_DllExport void cycle_count(uint16_t _cycle_count);

            /*!
             * @brief This function returns the value of member cycle_count
             * @return Value of member cycle_count
             */
            eProsima_user_DllExport uint16_t cycle_count() const;

            /*!
             * @brief This function returns a reference to member cycle_count
             * @return Reference to member cycle_count
             */
            eProsima_user_DllExport uint16_t& cycle_count();

            /*!
             * @brief This function sets a value in member average_time_to_empty
             * @param _average_time_to_empty New value for member average_time_to_empty
             */
            eProsima_user_DllExport void average_time_to_empty(uint16_t _average_time_to_empty);

            /*!
             * @brief This function returns the value of member average_time_to_empty
             * @return Value of member average_time_to_empty
             */
            eProsima_user_DllExport uint16_t average_time_to_empty() const;

            /*!
             * @brief This function returns a reference to member average_time_to_empty
             * @return Reference to member average_time_to_empty
             */
            eProsima_user_DllExport uint16_t& average_time_to_empty();

            /*!
             * @brief This function sets a value in member serial_number
             * @param _serial_number New value for member serial_number
             */
            eProsima_user_DllExport void serial_number(uint16_t _serial_number);

            /*!
             * @brief This function returns the value of member serial_number
             * @return Value of member serial_number
             */
            eProsima_user_DllExport uint16_t serial_number() const;

            /*!
             * @brief This function returns a reference to member serial_number
             * @return Reference to member serial_number
             */
            eProsima_user_DllExport uint16_t& serial_number();

            /*!
             * @brief This function sets a value in member manufacture_date
             * @param _manufacture_date New value for member manufacture_date
             */
            eProsima_user_DllExport void manufacture_date(uint16_t _manufacture_date);

            /*!
             * @brief This function returns the value of member manufacture_date
             * @return Value of member manufacture_date
             */
            eProsima_user_DllExport uint16_t manufacture_date() const;

            /*!
             * @brief This function returns a reference to member manufacture_date
             * @return Reference to member manufacture_date
             */
            eProsima_user_DllExport uint16_t& manufacture_date();

            /*!
             * @brief This function sets a value in member state_of_health
             * @param _state_of_health New value for member state_of_health
             */
            eProsima_user_DllExport void state_of_health(uint16_t _state_of_health);

            /*!
             * @brief This function returns the value of member state_of_health
             * @return Value of member state_of_health
             */
            eProsima_user_DllExport uint16_t state_of_health() const;

            /*!
             * @brief This function returns a reference to member state_of_health
             * @return Reference to member state_of_health
             */
            eProsima_user_DllExport uint16_t& state_of_health();

            /*!
             * @brief This function sets a value in member max_error
             * @param _max_error New value for member max_error
             */
            eProsima_user_DllExport void max_error(uint16_t _max_error);

            /*!
             * @brief This function returns the value of member max_error
             * @return Value of member max_error
             */
            eProsima_user_DllExport uint16_t max_error() const;

            /*!
             * @brief This function returns a reference to member max_error
             * @return Reference to member max_error
             */
            eProsima_user_DllExport uint16_t& max_error();

            /*!
             * @brief This function sets a value in member id
             * @param _id New value for member id
             */
            eProsima_user_DllExport void id(uint8_t _id);

            /*!
             * @brief This function returns the value of member id
             * @return Value of member id
             */
            eProsima_user_DllExport uint8_t id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport uint8_t& id();

            /*!
             * @brief This function sets a value in member interface_error
             * @param _interface_error New value for member interface_error
             */
            eProsima_user_DllExport void interface_error(uint16_t _interface_error);

            /*!
             * @brief This function returns the value of member interface_error
             * @return Value of member interface_error
             */
            eProsima_user_DllExport uint16_t interface_error() const;

            /*!
             * @brief This function returns a reference to member interface_error
             * @return Reference to member interface_error
             */
            eProsima_user_DllExport uint16_t& interface_error();

            /*!
             * @brief This function copies the value in member voltage_cell_v
             * @param _voltage_cell_v New value to be copied in member voltage_cell_v
             */
            eProsima_user_DllExport void voltage_cell_v(const px4_msgs::msg::float__14 &_voltage_cell_v);

            /*!
             * @brief This function moves the value in member voltage_cell_v
             * @param _voltage_cell_v New value to be moved in member voltage_cell_v
             */
            eProsima_user_DllExport void voltage_cell_v(px4_msgs::msg::float__14 &&_voltage_cell_v);

            /*!
             * @brief This function returns a constant reference to member voltage_cell_v
             * @return Constant reference to member voltage_cell_v
             */
            eProsima_user_DllExport const px4_msgs::msg::float__14& voltage_cell_v() const;

            /*!
             * @brief This function returns a reference to member voltage_cell_v
             * @return Reference to member voltage_cell_v
             */
            eProsima_user_DllExport px4_msgs::msg::float__14& voltage_cell_v();
            /*!
             * @brief This function sets a value in member max_cell_voltage_delta
             * @param _max_cell_voltage_delta New value for member max_cell_voltage_delta
             */
            eProsima_user_DllExport void max_cell_voltage_delta(float _max_cell_voltage_delta);

            /*!
             * @brief This function returns the value of member max_cell_voltage_delta
             * @return Value of member max_cell_voltage_delta
             */
            eProsima_user_DllExport float max_cell_voltage_delta() const;

            /*!
             * @brief This function returns a reference to member max_cell_voltage_delta
             * @return Reference to member max_cell_voltage_delta
             */
            eProsima_user_DllExport float& max_cell_voltage_delta();

            /*!
             * @brief This function sets a value in member is_powering_off
             * @param _is_powering_off New value for member is_powering_off
             */
            eProsima_user_DllExport void is_powering_off(bool _is_powering_off);

            /*!
             * @brief This function returns the value of member is_powering_off
             * @return Value of member is_powering_off
             */
            eProsima_user_DllExport bool is_powering_off() const;

            /*!
             * @brief This function returns a reference to member is_powering_off
             * @return Reference to member is_powering_off
             */
            eProsima_user_DllExport bool& is_powering_off();

            /*!
             * @brief This function sets a value in member is_required
             * @param _is_required New value for member is_required
             */
            eProsima_user_DllExport void is_required(bool _is_required);

            /*!
             * @brief This function returns the value of member is_required
             * @return Value of member is_required
             */
            eProsima_user_DllExport bool is_required() const;

            /*!
             * @brief This function returns a reference to member is_required
             * @return Reference to member is_required
             */
            eProsima_user_DllExport bool& is_required();

            /*!
             * @brief This function sets a value in member faults
             * @param _faults New value for member faults
             */
            eProsima_user_DllExport void faults(uint16_t _faults);

            /*!
             * @brief This function returns the value of member faults
             * @return Value of member faults
             */
            eProsima_user_DllExport uint16_t faults() const;

            /*!
             * @brief This function returns a reference to member faults
             * @return Reference to member faults
             */
            eProsima_user_DllExport uint16_t& faults();

            /*!
             * @brief This function sets a value in member custom_faults
             * @param _custom_faults New value for member custom_faults
             */
            eProsima_user_DllExport void custom_faults(uint32_t _custom_faults);

            /*!
             * @brief This function returns the value of member custom_faults
             * @return Value of member custom_faults
             */
            eProsima_user_DllExport uint32_t custom_faults() const;

            /*!
             * @brief This function returns a reference to member custom_faults
             * @return Reference to member custom_faults
             */
            eProsima_user_DllExport uint32_t& custom_faults();

            /*!
             * @brief This function sets a value in member warning
             * @param _warning New value for member warning
             */
            eProsima_user_DllExport void warning(uint8_t _warning);

            /*!
             * @brief This function returns the value of member warning
             * @return Value of member warning
             */
            eProsima_user_DllExport uint8_t warning() const;

            /*!
             * @brief This function returns a reference to member warning
             * @return Reference to member warning
             */
            eProsima_user_DllExport uint8_t& warning();

            /*!
             * @brief This function sets a value in member mode
             * @param _mode New value for member mode
             */
            eProsima_user_DllExport void mode(uint8_t _mode);

            /*!
             * @brief This function returns the value of member mode
             * @return Value of member mode
             */
            eProsima_user_DllExport uint8_t mode() const;

            /*!
             * @brief This function returns a reference to member mode
             * @return Reference to member mode
             */
            eProsima_user_DllExport uint8_t& mode();

            /*!
             * @brief This function sets a value in member average_power
             * @param _average_power New value for member average_power
             */
            eProsima_user_DllExport void average_power(float _average_power);

            /*!
             * @brief This function returns the value of member average_power
             * @return Value of member average_power
             */
            eProsima_user_DllExport float average_power() const;

            /*!
             * @brief This function returns a reference to member average_power
             * @return Reference to member average_power
             */
            eProsima_user_DllExport float& average_power();

            /*!
             * @brief This function sets a value in member available_energy
             * @param _available_energy New value for member available_energy
             */
            eProsima_user_DllExport void available_energy(float _available_energy);

            /*!
             * @brief This function returns the value of member available_energy
             * @return Value of member available_energy
             */
            eProsima_user_DllExport float available_energy() const;

            /*!
             * @brief This function returns a reference to member available_energy
             * @return Reference to member available_energy
             */
            eProsima_user_DllExport float& available_energy();

            /*!
             * @brief This function sets a value in member full_charge_capacity_wh
             * @param _full_charge_capacity_wh New value for member full_charge_capacity_wh
             */
            eProsima_user_DllExport void full_charge_capacity_wh(float _full_charge_capacity_wh);

            /*!
             * @brief This function returns the value of member full_charge_capacity_wh
             * @return Value of member full_charge_capacity_wh
             */
            eProsima_user_DllExport float full_charge_capacity_wh() const;

            /*!
             * @brief This function returns a reference to member full_charge_capacity_wh
             * @return Reference to member full_charge_capacity_wh
             */
            eProsima_user_DllExport float& full_charge_capacity_wh();

            /*!
             * @brief This function sets a value in member remaining_capacity_wh
             * @param _remaining_capacity_wh New value for member remaining_capacity_wh
             */
            eProsima_user_DllExport void remaining_capacity_wh(float _remaining_capacity_wh);

            /*!
             * @brief This function returns the value of member remaining_capacity_wh
             * @return Value of member remaining_capacity_wh
             */
            eProsima_user_DllExport float remaining_capacity_wh() const;

            /*!
             * @brief This function returns a reference to member remaining_capacity_wh
             * @return Reference to member remaining_capacity_wh
             */
            eProsima_user_DllExport float& remaining_capacity_wh();

            /*!
             * @brief This function sets a value in member design_capacity
             * @param _design_capacity New value for member design_capacity
             */
            eProsima_user_DllExport void design_capacity(float _design_capacity);

            /*!
             * @brief This function returns the value of member design_capacity
             * @return Value of member design_capacity
             */
            eProsima_user_DllExport float design_capacity() const;

            /*!
             * @brief This function returns a reference to member design_capacity
             * @return Reference to member design_capacity
             */
            eProsima_user_DllExport float& design_capacity();

            /*!
             * @brief This function sets a value in member average_time_to_full
             * @param _average_time_to_full New value for member average_time_to_full
             */
            eProsima_user_DllExport void average_time_to_full(uint16_t _average_time_to_full);

            /*!
             * @brief This function returns the value of member average_time_to_full
             * @return Value of member average_time_to_full
             */
            eProsima_user_DllExport uint16_t average_time_to_full() const;

            /*!
             * @brief This function returns a reference to member average_time_to_full
             * @return Reference to member average_time_to_full
             */
            eProsima_user_DllExport uint16_t& average_time_to_full();

            /*!
             * @brief This function sets a value in member over_discharge_count
             * @param _over_discharge_count New value for member over_discharge_count
             */
            eProsima_user_DllExport void over_discharge_count(uint16_t _over_discharge_count);

            /*!
             * @brief This function returns the value of member over_discharge_count
             * @return Value of member over_discharge_count
             */
            eProsima_user_DllExport uint16_t over_discharge_count() const;

            /*!
             * @brief This function returns a reference to member over_discharge_count
             * @return Reference to member over_discharge_count
             */
            eProsima_user_DllExport uint16_t& over_discharge_count();

            /*!
             * @brief This function sets a value in member nominal_voltage
             * @param _nominal_voltage New value for member nominal_voltage
             */
            eProsima_user_DllExport void nominal_voltage(float _nominal_voltage);

            /*!
             * @brief This function returns the value of member nominal_voltage
             * @return Value of member nominal_voltage
             */
            eProsima_user_DllExport float nominal_voltage() const;

            /*!
             * @brief This function returns a reference to member nominal_voltage
             * @return Reference to member nominal_voltage
             */
            eProsima_user_DllExport float& nominal_voltage();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::BatteryStatus& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            bool m_connected;
            float m_voltage_v;
            float m_voltage_filtered_v;
            float m_current_a;
            float m_current_filtered_a;
            float m_current_average_a;
            float m_discharged_mah;
            float m_remaining;
            float m_scale;
            float m_time_remaining_s;
            float m_temperature;
            uint8_t m_cell_count;
            uint8_t m_source;
            uint8_t m_priority;
            uint16_t m_capacity;
            uint16_t m_cycle_count;
            uint16_t m_average_time_to_empty;
            uint16_t m_serial_number;
            uint16_t m_manufacture_date;
            uint16_t m_state_of_health;
            uint16_t m_max_error;
            uint8_t m_id;
            uint16_t m_interface_error;
            px4_msgs::msg::float__14 m_voltage_cell_v;
            float m_max_cell_voltage_delta;
            bool m_is_powering_off;
            bool m_is_required;
            uint16_t m_faults;
            uint32_t m_custom_faults;
            uint8_t m_warning;
            uint8_t m_mode;
            float m_average_power;
            float m_available_energy;
            float m_full_charge_capacity_wh;
            float m_remaining_capacity_wh;
            float m_design_capacity;
            uint16_t m_average_time_to_full;
            uint16_t m_over_discharge_count;
            float m_nominal_voltage;
        };
    }
}

#endif // _PX4_MSGS_MSG_BATTERYSTATUS_H_