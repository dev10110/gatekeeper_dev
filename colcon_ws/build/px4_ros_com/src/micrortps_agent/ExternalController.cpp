// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ExternalController.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "ExternalController.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

px4_msgs::msg::ExternalController::ExternalController()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@210366b4
    m_timestamp = 0;
    // m_use_geometric_control com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b2948e2
    m_use_geometric_control = false;

}

px4_msgs::msg::ExternalController::~ExternalController()
{


}

px4_msgs::msg::ExternalController::ExternalController(const ExternalController &x)
{
    m_timestamp = x.m_timestamp;
    m_use_geometric_control = x.m_use_geometric_control;
}

px4_msgs::msg::ExternalController::ExternalController(ExternalController &&x)
{
    m_timestamp = x.m_timestamp;
    m_use_geometric_control = x.m_use_geometric_control;
}

px4_msgs::msg::ExternalController& px4_msgs::msg::ExternalController::operator=(const ExternalController &x)
{

    m_timestamp = x.m_timestamp;
    m_use_geometric_control = x.m_use_geometric_control;

    return *this;
}

px4_msgs::msg::ExternalController& px4_msgs::msg::ExternalController::operator=(ExternalController &&x)
{

    m_timestamp = x.m_timestamp;
    m_use_geometric_control = x.m_use_geometric_control;

    return *this;
}

size_t px4_msgs::msg::ExternalController::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::ExternalController::getCdrSerializedSize(const px4_msgs::msg::ExternalController& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::ExternalController::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_use_geometric_control;
}

void px4_msgs::msg::ExternalController::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_use_geometric_control;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::ExternalController::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::ExternalController::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::ExternalController::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member use_geometric_control
 * @param _use_geometric_control New value for member use_geometric_control
 */
void px4_msgs::msg::ExternalController::use_geometric_control(bool _use_geometric_control)
{
m_use_geometric_control = _use_geometric_control;
}

/*!
 * @brief This function returns the value of member use_geometric_control
 * @return Value of member use_geometric_control
 */
bool px4_msgs::msg::ExternalController::use_geometric_control() const
{
    return m_use_geometric_control;
}

/*!
 * @brief This function returns a reference to member use_geometric_control
 * @return Reference to member use_geometric_control
 */
bool& px4_msgs::msg::ExternalController::use_geometric_control()
{
    return m_use_geometric_control;
}


size_t px4_msgs::msg::ExternalController::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool px4_msgs::msg::ExternalController::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::ExternalController::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}


