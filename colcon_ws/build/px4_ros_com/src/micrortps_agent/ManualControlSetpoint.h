// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ManualControlSetpoint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_MANUALCONTROLSETPOINT_H_
#define _PX4_MSGS_MSG_MANUALCONTROLSETPOINT_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ManualControlSetpoint_SOURCE)
#define ManualControlSetpoint_DllAPI __declspec( dllexport )
#else
#define ManualControlSetpoint_DllAPI __declspec( dllimport )
#endif // ManualControlSetpoint_SOURCE
#else
#define ManualControlSetpoint_DllAPI
#endif
#else
#define ManualControlSetpoint_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        namespace ManualControlSetpoint_Constants
        {
            const uint8_t SOURCE_UNKNOWN = 0;
            const uint8_t SOURCE_RC = 1;
            const uint8_t SOURCE_MAVLINK_0 = 2;
            const uint8_t SOURCE_MAVLINK_1 = 3;
            const uint8_t SOURCE_MAVLINK_2 = 4;
            const uint8_t SOURCE_MAVLINK_3 = 5;
            const uint8_t SOURCE_MAVLINK_4 = 6;
            const uint8_t SOURCE_MAVLINK_5 = 7;
        }
        /*!
         * @brief This class represents the structure ManualControlSetpoint defined by the user in the IDL file.
         * @ingroup MANUALCONTROLSETPOINT
         */
        class ManualControlSetpoint
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ManualControlSetpoint();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ManualControlSetpoint();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::ManualControlSetpoint that will be copied.
             */
            eProsima_user_DllExport ManualControlSetpoint(const ManualControlSetpoint &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::ManualControlSetpoint that will be copied.
             */
            eProsima_user_DllExport ManualControlSetpoint(ManualControlSetpoint &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::ManualControlSetpoint that will be copied.
             */
            eProsima_user_DllExport ManualControlSetpoint& operator=(const ManualControlSetpoint &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::ManualControlSetpoint that will be copied.
             */
            eProsima_user_DllExport ManualControlSetpoint& operator=(ManualControlSetpoint &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member timestamp_sample
             * @param _timestamp_sample New value for member timestamp_sample
             */
            eProsima_user_DllExport void timestamp_sample(uint64_t _timestamp_sample);

            /*!
             * @brief This function returns the value of member timestamp_sample
             * @return Value of member timestamp_sample
             */
            eProsima_user_DllExport uint64_t timestamp_sample() const;

            /*!
             * @brief This function returns a reference to member timestamp_sample
             * @return Reference to member timestamp_sample
             */
            eProsima_user_DllExport uint64_t& timestamp_sample();

            /*!
             * @brief This function sets a value in member valid
             * @param _valid New value for member valid
             */
            eProsima_user_DllExport void valid(bool _valid);

            /*!
             * @brief This function returns the value of member valid
             * @return Value of member valid
             */
            eProsima_user_DllExport bool valid() const;

            /*!
             * @brief This function returns a reference to member valid
             * @return Reference to member valid
             */
            eProsima_user_DllExport bool& valid();

            /*!
             * @brief This function sets a value in member data_source
             * @param _data_source New value for member data_source
             */
            eProsima_user_DllExport void data_source(uint8_t _data_source);

            /*!
             * @brief This function returns the value of member data_source
             * @return Value of member data_source
             */
            eProsima_user_DllExport uint8_t data_source() const;

            /*!
             * @brief This function returns a reference to member data_source
             * @return Reference to member data_source
             */
            eProsima_user_DllExport uint8_t& data_source();

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(float _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport float x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport float& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(float _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport float y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport float& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(float _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport float z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport float& z();

            /*!
             * @brief This function sets a value in member r
             * @param _r New value for member r
             */
            eProsima_user_DllExport void r(float _r);

            /*!
             * @brief This function returns the value of member r
             * @return Value of member r
             */
            eProsima_user_DllExport float r() const;

            /*!
             * @brief This function returns a reference to member r
             * @return Reference to member r
             */
            eProsima_user_DllExport float& r();

            /*!
             * @brief This function sets a value in member flaps
             * @param _flaps New value for member flaps
             */
            eProsima_user_DllExport void flaps(float _flaps);

            /*!
             * @brief This function returns the value of member flaps
             * @return Value of member flaps
             */
            eProsima_user_DllExport float flaps() const;

            /*!
             * @brief This function returns a reference to member flaps
             * @return Reference to member flaps
             */
            eProsima_user_DllExport float& flaps();

            /*!
             * @brief This function sets a value in member aux1
             * @param _aux1 New value for member aux1
             */
            eProsima_user_DllExport void aux1(float _aux1);

            /*!
             * @brief This function returns the value of member aux1
             * @return Value of member aux1
             */
            eProsima_user_DllExport float aux1() const;

            /*!
             * @brief This function returns a reference to member aux1
             * @return Reference to member aux1
             */
            eProsima_user_DllExport float& aux1();

            /*!
             * @brief This function sets a value in member aux2
             * @param _aux2 New value for member aux2
             */
            eProsima_user_DllExport void aux2(float _aux2);

            /*!
             * @brief This function returns the value of member aux2
             * @return Value of member aux2
             */
            eProsima_user_DllExport float aux2() const;

            /*!
             * @brief This function returns a reference to member aux2
             * @return Reference to member aux2
             */
            eProsima_user_DllExport float& aux2();

            /*!
             * @brief This function sets a value in member aux3
             * @param _aux3 New value for member aux3
             */
            eProsima_user_DllExport void aux3(float _aux3);

            /*!
             * @brief This function returns the value of member aux3
             * @return Value of member aux3
             */
            eProsima_user_DllExport float aux3() const;

            /*!
             * @brief This function returns a reference to member aux3
             * @return Reference to member aux3
             */
            eProsima_user_DllExport float& aux3();

            /*!
             * @brief This function sets a value in member aux4
             * @param _aux4 New value for member aux4
             */
            eProsima_user_DllExport void aux4(float _aux4);

            /*!
             * @brief This function returns the value of member aux4
             * @return Value of member aux4
             */
            eProsima_user_DllExport float aux4() const;

            /*!
             * @brief This function returns a reference to member aux4
             * @return Reference to member aux4
             */
            eProsima_user_DllExport float& aux4();

            /*!
             * @brief This function sets a value in member aux5
             * @param _aux5 New value for member aux5
             */
            eProsima_user_DllExport void aux5(float _aux5);

            /*!
             * @brief This function returns the value of member aux5
             * @return Value of member aux5
             */
            eProsima_user_DllExport float aux5() const;

            /*!
             * @brief This function returns a reference to member aux5
             * @return Reference to member aux5
             */
            eProsima_user_DllExport float& aux5();

            /*!
             * @brief This function sets a value in member aux6
             * @param _aux6 New value for member aux6
             */
            eProsima_user_DllExport void aux6(float _aux6);

            /*!
             * @brief This function returns the value of member aux6
             * @return Value of member aux6
             */
            eProsima_user_DllExport float aux6() const;

            /*!
             * @brief This function returns a reference to member aux6
             * @return Reference to member aux6
             */
            eProsima_user_DllExport float& aux6();

            /*!
             * @brief This function sets a value in member sticks_moving
             * @param _sticks_moving New value for member sticks_moving
             */
            eProsima_user_DllExport void sticks_moving(bool _sticks_moving);

            /*!
             * @brief This function returns the value of member sticks_moving
             * @return Value of member sticks_moving
             */
            eProsima_user_DllExport bool sticks_moving() const;

            /*!
             * @brief This function returns a reference to member sticks_moving
             * @return Reference to member sticks_moving
             */
            eProsima_user_DllExport bool& sticks_moving();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::ManualControlSetpoint& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            uint64_t m_timestamp_sample;
            bool m_valid;
            uint8_t m_data_source;
            float m_x;
            float m_y;
            float m_z;
            float m_r;
            float m_flaps;
            float m_aux1;
            float m_aux2;
            float m_aux3;
            float m_aux4;
            float m_aux5;
            float m_aux6;
            bool m_sticks_moving;
        };
    }
}

#endif // _PX4_MSGS_MSG_MANUALCONTROLSETPOINT_H_