// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GpsInjectData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "GpsInjectData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



px4_msgs::msg::GpsInjectData::GpsInjectData()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76508ed1
    m_timestamp = 0;
    // m_device_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@41e36e46
    m_device_id = 0;
    // m_len com.eprosima.idl.parser.typecode.PrimitiveTypeCode@15c43bd9
    m_len = 0;
    // m_flags com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3d74bf60
    m_flags = 0;
    // m_data com.eprosima.idl.parser.typecode.AliasTypeCode@4f209819
    memset(&m_data, 0, (300) * 1);

}

px4_msgs::msg::GpsInjectData::~GpsInjectData()
{





}

px4_msgs::msg::GpsInjectData::GpsInjectData(const GpsInjectData &x)
{
    m_timestamp = x.m_timestamp;
    m_device_id = x.m_device_id;
    m_len = x.m_len;
    m_flags = x.m_flags;
    m_data = x.m_data;
}

px4_msgs::msg::GpsInjectData::GpsInjectData(GpsInjectData &&x)
{
    m_timestamp = x.m_timestamp;
    m_device_id = x.m_device_id;
    m_len = x.m_len;
    m_flags = x.m_flags;
    m_data = std::move(x.m_data);
}

px4_msgs::msg::GpsInjectData& px4_msgs::msg::GpsInjectData::operator=(const GpsInjectData &x)
{

    m_timestamp = x.m_timestamp;
    m_device_id = x.m_device_id;
    m_len = x.m_len;
    m_flags = x.m_flags;
    m_data = x.m_data;

    return *this;
}

px4_msgs::msg::GpsInjectData& px4_msgs::msg::GpsInjectData::operator=(GpsInjectData &&x)
{

    m_timestamp = x.m_timestamp;
    m_device_id = x.m_device_id;
    m_len = x.m_len;
    m_flags = x.m_flags;
    m_data = std::move(x.m_data);

    return *this;
}

size_t px4_msgs::msg::GpsInjectData::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((300) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::GpsInjectData::getCdrSerializedSize(const px4_msgs::msg::GpsInjectData& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((300) > 0)
    {
        current_alignment += ((300) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void px4_msgs::msg::GpsInjectData::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_device_id;
    scdr << m_len;
    scdr << m_flags;
    scdr << m_data;

}

void px4_msgs::msg::GpsInjectData::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_device_id;
    dcdr >> m_len;
    dcdr >> m_flags;
    dcdr >> m_data;

}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::GpsInjectData::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::GpsInjectData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::GpsInjectData::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member device_id
 * @param _device_id New value for member device_id
 */
void px4_msgs::msg::GpsInjectData::device_id(uint32_t _device_id)
{
m_device_id = _device_id;
}

/*!
 * @brief This function returns the value of member device_id
 * @return Value of member device_id
 */
uint32_t px4_msgs::msg::GpsInjectData::device_id() const
{
    return m_device_id;
}

/*!
 * @brief This function returns a reference to member device_id
 * @return Reference to member device_id
 */
uint32_t& px4_msgs::msg::GpsInjectData::device_id()
{
    return m_device_id;
}

/*!
 * @brief This function sets a value in member len
 * @param _len New value for member len
 */
void px4_msgs::msg::GpsInjectData::len(uint8_t _len)
{
m_len = _len;
}

/*!
 * @brief This function returns the value of member len
 * @return Value of member len
 */
uint8_t px4_msgs::msg::GpsInjectData::len() const
{
    return m_len;
}

/*!
 * @brief This function returns a reference to member len
 * @return Reference to member len
 */
uint8_t& px4_msgs::msg::GpsInjectData::len()
{
    return m_len;
}

/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void px4_msgs::msg::GpsInjectData::flags(uint8_t _flags)
{
m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint8_t px4_msgs::msg::GpsInjectData::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint8_t& px4_msgs::msg::GpsInjectData::flags()
{
    return m_flags;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void px4_msgs::msg::GpsInjectData::data(const px4_msgs::msg::uint8__300 &_data)
{
m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void px4_msgs::msg::GpsInjectData::data(px4_msgs::msg::uint8__300 &&_data)
{
m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const px4_msgs::msg::uint8__300& px4_msgs::msg::GpsInjectData::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
px4_msgs::msg::uint8__300& px4_msgs::msg::GpsInjectData::data()
{
    return m_data;
}

size_t px4_msgs::msg::GpsInjectData::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool px4_msgs::msg::GpsInjectData::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::GpsInjectData::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
}


