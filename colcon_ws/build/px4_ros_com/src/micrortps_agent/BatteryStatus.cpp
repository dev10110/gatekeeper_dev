// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BatteryStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "BatteryStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






























px4_msgs::msg::BatteryStatus::BatteryStatus()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5906ebcb
    m_timestamp = 0;
    // m_connected com.eprosima.idl.parser.typecode.PrimitiveTypeCode@258e2e41
    m_connected = false;
    // m_voltage_v com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3d299e3
    m_voltage_v = 0.0;
    // m_voltage_filtered_v com.eprosima.idl.parser.typecode.PrimitiveTypeCode@55a561cf
    m_voltage_filtered_v = 0.0;
    // m_current_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b938003
    m_current_a = 0.0;
    // m_current_filtered_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f3b5d16
    m_current_filtered_a = 0.0;
    // m_current_average_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@78b1cc93
    m_current_average_a = 0.0;
    // m_discharged_mah com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6646153
    m_discharged_mah = 0.0;
    // m_remaining com.eprosima.idl.parser.typecode.PrimitiveTypeCode@21507a04
    m_remaining = 0.0;
    // m_scale com.eprosima.idl.parser.typecode.PrimitiveTypeCode@143640d5
    m_scale = 0.0;
    // m_time_remaining_s com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6295d394
    m_time_remaining_s = 0.0;
    // m_temperature com.eprosima.idl.parser.typecode.PrimitiveTypeCode@475e586c
    m_temperature = 0.0;
    // m_cell_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@657c8ad9
    m_cell_count = 0;
    // m_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@436a4e4b
    m_source = 0;
    // m_priority com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f2f2cc1
    m_priority = 0;
    // m_capacity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a079870
    m_capacity = 0;
    // m_cycle_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b2cf7ab
    m_cycle_count = 0;
    // m_average_time_to_empty com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2aa5fe93
    m_average_time_to_empty = 0;
    // m_serial_number com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c1a8622
    m_serial_number = 0;
    // m_manufacture_date com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ad851c9
    m_manufacture_date = 0;
    // m_state_of_health com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6156496
    m_state_of_health = 0;
    // m_max_error com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c153a1
    m_max_error = 0;
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b62fe6d
    m_id = 0;
    // m_interface_error com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13acb0d1
    m_interface_error = 0;
    // m_voltage_cell_v com.eprosima.idl.parser.typecode.AliasTypeCode@3e3047e6
    memset(&m_voltage_cell_v, 0, (14) * 4);
    // m_max_cell_voltage_delta com.eprosima.idl.parser.typecode.PrimitiveTypeCode@37e547da
    m_max_cell_voltage_delta = 0.0;
    // m_is_powering_off com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b6856dd
    m_is_powering_off = false;
    // m_is_required com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5db45159
    m_is_required = false;
    // m_faults com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6107227e
    m_faults = 0;
    // m_custom_faults com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7c417213
    m_custom_faults = 0;
    // m_warning com.eprosima.idl.parser.typecode.PrimitiveTypeCode@15761df8
    m_warning = 0;
    // m_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ab7a896
    m_mode = 0;
    // m_average_power com.eprosima.idl.parser.typecode.PrimitiveTypeCode@327b636c
    m_average_power = 0.0;
    // m_available_energy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@45dd4eda
    m_available_energy = 0.0;
    // m_full_charge_capacity_wh com.eprosima.idl.parser.typecode.PrimitiveTypeCode@60611244
    m_full_charge_capacity_wh = 0.0;
    // m_remaining_capacity_wh com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3745e5c6
    m_remaining_capacity_wh = 0.0;
    // m_design_capacity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e4c8041
    m_design_capacity = 0.0;
    // m_average_time_to_full com.eprosima.idl.parser.typecode.PrimitiveTypeCode@71c8becc
    m_average_time_to_full = 0;
    // m_over_discharge_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@19d37183
    m_over_discharge_count = 0;
    // m_nominal_voltage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a0dcaa
    m_nominal_voltage = 0.0;

}

px4_msgs::msg::BatteryStatus::~BatteryStatus()
{








































}

px4_msgs::msg::BatteryStatus::BatteryStatus(const BatteryStatus &x)
{
    m_timestamp = x.m_timestamp;
    m_connected = x.m_connected;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_current_average_a = x.m_current_average_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_time_remaining_s = x.m_time_remaining_s;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_source = x.m_source;
    m_priority = x.m_priority;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_manufacture_date = x.m_manufacture_date;
    m_state_of_health = x.m_state_of_health;
    m_max_error = x.m_max_error;
    m_id = x.m_id;
    m_interface_error = x.m_interface_error;
    m_voltage_cell_v = x.m_voltage_cell_v;
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_is_powering_off = x.m_is_powering_off;
    m_is_required = x.m_is_required;
    m_faults = x.m_faults;
    m_custom_faults = x.m_custom_faults;
    m_warning = x.m_warning;
    m_mode = x.m_mode;
    m_average_power = x.m_average_power;
    m_available_energy = x.m_available_energy;
    m_full_charge_capacity_wh = x.m_full_charge_capacity_wh;
    m_remaining_capacity_wh = x.m_remaining_capacity_wh;
    m_design_capacity = x.m_design_capacity;
    m_average_time_to_full = x.m_average_time_to_full;
    m_over_discharge_count = x.m_over_discharge_count;
    m_nominal_voltage = x.m_nominal_voltage;
}

px4_msgs::msg::BatteryStatus::BatteryStatus(BatteryStatus &&x)
{
    m_timestamp = x.m_timestamp;
    m_connected = x.m_connected;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_current_average_a = x.m_current_average_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_time_remaining_s = x.m_time_remaining_s;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_source = x.m_source;
    m_priority = x.m_priority;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_manufacture_date = x.m_manufacture_date;
    m_state_of_health = x.m_state_of_health;
    m_max_error = x.m_max_error;
    m_id = x.m_id;
    m_interface_error = x.m_interface_error;
    m_voltage_cell_v = std::move(x.m_voltage_cell_v);
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_is_powering_off = x.m_is_powering_off;
    m_is_required = x.m_is_required;
    m_faults = x.m_faults;
    m_custom_faults = x.m_custom_faults;
    m_warning = x.m_warning;
    m_mode = x.m_mode;
    m_average_power = x.m_average_power;
    m_available_energy = x.m_available_energy;
    m_full_charge_capacity_wh = x.m_full_charge_capacity_wh;
    m_remaining_capacity_wh = x.m_remaining_capacity_wh;
    m_design_capacity = x.m_design_capacity;
    m_average_time_to_full = x.m_average_time_to_full;
    m_over_discharge_count = x.m_over_discharge_count;
    m_nominal_voltage = x.m_nominal_voltage;
}

px4_msgs::msg::BatteryStatus& px4_msgs::msg::BatteryStatus::operator=(const BatteryStatus &x)
{

    m_timestamp = x.m_timestamp;
    m_connected = x.m_connected;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_current_average_a = x.m_current_average_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_time_remaining_s = x.m_time_remaining_s;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_source = x.m_source;
    m_priority = x.m_priority;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_manufacture_date = x.m_manufacture_date;
    m_state_of_health = x.m_state_of_health;
    m_max_error = x.m_max_error;
    m_id = x.m_id;
    m_interface_error = x.m_interface_error;
    m_voltage_cell_v = x.m_voltage_cell_v;
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_is_powering_off = x.m_is_powering_off;
    m_is_required = x.m_is_required;
    m_faults = x.m_faults;
    m_custom_faults = x.m_custom_faults;
    m_warning = x.m_warning;
    m_mode = x.m_mode;
    m_average_power = x.m_average_power;
    m_available_energy = x.m_available_energy;
    m_full_charge_capacity_wh = x.m_full_charge_capacity_wh;
    m_remaining_capacity_wh = x.m_remaining_capacity_wh;
    m_design_capacity = x.m_design_capacity;
    m_average_time_to_full = x.m_average_time_to_full;
    m_over_discharge_count = x.m_over_discharge_count;
    m_nominal_voltage = x.m_nominal_voltage;

    return *this;
}

px4_msgs::msg::BatteryStatus& px4_msgs::msg::BatteryStatus::operator=(BatteryStatus &&x)
{

    m_timestamp = x.m_timestamp;
    m_connected = x.m_connected;
    m_voltage_v = x.m_voltage_v;
    m_voltage_filtered_v = x.m_voltage_filtered_v;
    m_current_a = x.m_current_a;
    m_current_filtered_a = x.m_current_filtered_a;
    m_current_average_a = x.m_current_average_a;
    m_discharged_mah = x.m_discharged_mah;
    m_remaining = x.m_remaining;
    m_scale = x.m_scale;
    m_time_remaining_s = x.m_time_remaining_s;
    m_temperature = x.m_temperature;
    m_cell_count = x.m_cell_count;
    m_source = x.m_source;
    m_priority = x.m_priority;
    m_capacity = x.m_capacity;
    m_cycle_count = x.m_cycle_count;
    m_average_time_to_empty = x.m_average_time_to_empty;
    m_serial_number = x.m_serial_number;
    m_manufacture_date = x.m_manufacture_date;
    m_state_of_health = x.m_state_of_health;
    m_max_error = x.m_max_error;
    m_id = x.m_id;
    m_interface_error = x.m_interface_error;
    m_voltage_cell_v = std::move(x.m_voltage_cell_v);
    m_max_cell_voltage_delta = x.m_max_cell_voltage_delta;
    m_is_powering_off = x.m_is_powering_off;
    m_is_required = x.m_is_required;
    m_faults = x.m_faults;
    m_custom_faults = x.m_custom_faults;
    m_warning = x.m_warning;
    m_mode = x.m_mode;
    m_average_power = x.m_average_power;
    m_available_energy = x.m_available_energy;
    m_full_charge_capacity_wh = x.m_full_charge_capacity_wh;
    m_remaining_capacity_wh = x.m_remaining_capacity_wh;
    m_design_capacity = x.m_design_capacity;
    m_average_time_to_full = x.m_average_time_to_full;
    m_over_discharge_count = x.m_over_discharge_count;
    m_nominal_voltage = x.m_nominal_voltage;

    return *this;
}

size_t px4_msgs::msg::BatteryStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((14) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::BatteryStatus::getCdrSerializedSize(const px4_msgs::msg::BatteryStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    if ((14) > 0)
    {
        current_alignment += ((14) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::BatteryStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_connected;
    scdr << m_voltage_v;
    scdr << m_voltage_filtered_v;
    scdr << m_current_a;
    scdr << m_current_filtered_a;
    scdr << m_current_average_a;
    scdr << m_discharged_mah;
    scdr << m_remaining;
    scdr << m_scale;
    scdr << m_time_remaining_s;
    scdr << m_temperature;
    scdr << m_cell_count;
    scdr << m_source;
    scdr << m_priority;
    scdr << m_capacity;
    scdr << m_cycle_count;
    scdr << m_average_time_to_empty;
    scdr << m_serial_number;
    scdr << m_manufacture_date;
    scdr << m_state_of_health;
    scdr << m_max_error;
    scdr << m_id;
    scdr << m_interface_error;
    scdr << m_voltage_cell_v;

    scdr << m_max_cell_voltage_delta;
    scdr << m_is_powering_off;
    scdr << m_is_required;
    scdr << m_faults;
    scdr << m_custom_faults;
    scdr << m_warning;
    scdr << m_mode;
    scdr << m_average_power;
    scdr << m_available_energy;
    scdr << m_full_charge_capacity_wh;
    scdr << m_remaining_capacity_wh;
    scdr << m_design_capacity;
    scdr << m_average_time_to_full;
    scdr << m_over_discharge_count;
    scdr << m_nominal_voltage;
}

void px4_msgs::msg::BatteryStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_connected;
    dcdr >> m_voltage_v;
    dcdr >> m_voltage_filtered_v;
    dcdr >> m_current_a;
    dcdr >> m_current_filtered_a;
    dcdr >> m_current_average_a;
    dcdr >> m_discharged_mah;
    dcdr >> m_remaining;
    dcdr >> m_scale;
    dcdr >> m_time_remaining_s;
    dcdr >> m_temperature;
    dcdr >> m_cell_count;
    dcdr >> m_source;
    dcdr >> m_priority;
    dcdr >> m_capacity;
    dcdr >> m_cycle_count;
    dcdr >> m_average_time_to_empty;
    dcdr >> m_serial_number;
    dcdr >> m_manufacture_date;
    dcdr >> m_state_of_health;
    dcdr >> m_max_error;
    dcdr >> m_id;
    dcdr >> m_interface_error;
    dcdr >> m_voltage_cell_v;

    dcdr >> m_max_cell_voltage_delta;
    dcdr >> m_is_powering_off;
    dcdr >> m_is_required;
    dcdr >> m_faults;
    dcdr >> m_custom_faults;
    dcdr >> m_warning;
    dcdr >> m_mode;
    dcdr >> m_average_power;
    dcdr >> m_available_energy;
    dcdr >> m_full_charge_capacity_wh;
    dcdr >> m_remaining_capacity_wh;
    dcdr >> m_design_capacity;
    dcdr >> m_average_time_to_full;
    dcdr >> m_over_discharge_count;
    dcdr >> m_nominal_voltage;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::BatteryStatus::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::BatteryStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::BatteryStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member connected
 * @param _connected New value for member connected
 */
void px4_msgs::msg::BatteryStatus::connected(bool _connected)
{
m_connected = _connected;
}

/*!
 * @brief This function returns the value of member connected
 * @return Value of member connected
 */
bool px4_msgs::msg::BatteryStatus::connected() const
{
    return m_connected;
}

/*!
 * @brief This function returns a reference to member connected
 * @return Reference to member connected
 */
bool& px4_msgs::msg::BatteryStatus::connected()
{
    return m_connected;
}

/*!
 * @brief This function sets a value in member voltage_v
 * @param _voltage_v New value for member voltage_v
 */
void px4_msgs::msg::BatteryStatus::voltage_v(float _voltage_v)
{
m_voltage_v = _voltage_v;
}

/*!
 * @brief This function returns the value of member voltage_v
 * @return Value of member voltage_v
 */
float px4_msgs::msg::BatteryStatus::voltage_v() const
{
    return m_voltage_v;
}

/*!
 * @brief This function returns a reference to member voltage_v
 * @return Reference to member voltage_v
 */
float& px4_msgs::msg::BatteryStatus::voltage_v()
{
    return m_voltage_v;
}

/*!
 * @brief This function sets a value in member voltage_filtered_v
 * @param _voltage_filtered_v New value for member voltage_filtered_v
 */
void px4_msgs::msg::BatteryStatus::voltage_filtered_v(float _voltage_filtered_v)
{
m_voltage_filtered_v = _voltage_filtered_v;
}

/*!
 * @brief This function returns the value of member voltage_filtered_v
 * @return Value of member voltage_filtered_v
 */
float px4_msgs::msg::BatteryStatus::voltage_filtered_v() const
{
    return m_voltage_filtered_v;
}

/*!
 * @brief This function returns a reference to member voltage_filtered_v
 * @return Reference to member voltage_filtered_v
 */
float& px4_msgs::msg::BatteryStatus::voltage_filtered_v()
{
    return m_voltage_filtered_v;
}

/*!
 * @brief This function sets a value in member current_a
 * @param _current_a New value for member current_a
 */
void px4_msgs::msg::BatteryStatus::current_a(float _current_a)
{
m_current_a = _current_a;
}

/*!
 * @brief This function returns the value of member current_a
 * @return Value of member current_a
 */
float px4_msgs::msg::BatteryStatus::current_a() const
{
    return m_current_a;
}

/*!
 * @brief This function returns a reference to member current_a
 * @return Reference to member current_a
 */
float& px4_msgs::msg::BatteryStatus::current_a()
{
    return m_current_a;
}

/*!
 * @brief This function sets a value in member current_filtered_a
 * @param _current_filtered_a New value for member current_filtered_a
 */
void px4_msgs::msg::BatteryStatus::current_filtered_a(float _current_filtered_a)
{
m_current_filtered_a = _current_filtered_a;
}

/*!
 * @brief This function returns the value of member current_filtered_a
 * @return Value of member current_filtered_a
 */
float px4_msgs::msg::BatteryStatus::current_filtered_a() const
{
    return m_current_filtered_a;
}

/*!
 * @brief This function returns a reference to member current_filtered_a
 * @return Reference to member current_filtered_a
 */
float& px4_msgs::msg::BatteryStatus::current_filtered_a()
{
    return m_current_filtered_a;
}

/*!
 * @brief This function sets a value in member current_average_a
 * @param _current_average_a New value for member current_average_a
 */
void px4_msgs::msg::BatteryStatus::current_average_a(float _current_average_a)
{
m_current_average_a = _current_average_a;
}

/*!
 * @brief This function returns the value of member current_average_a
 * @return Value of member current_average_a
 */
float px4_msgs::msg::BatteryStatus::current_average_a() const
{
    return m_current_average_a;
}

/*!
 * @brief This function returns a reference to member current_average_a
 * @return Reference to member current_average_a
 */
float& px4_msgs::msg::BatteryStatus::current_average_a()
{
    return m_current_average_a;
}

/*!
 * @brief This function sets a value in member discharged_mah
 * @param _discharged_mah New value for member discharged_mah
 */
void px4_msgs::msg::BatteryStatus::discharged_mah(float _discharged_mah)
{
m_discharged_mah = _discharged_mah;
}

/*!
 * @brief This function returns the value of member discharged_mah
 * @return Value of member discharged_mah
 */
float px4_msgs::msg::BatteryStatus::discharged_mah() const
{
    return m_discharged_mah;
}

/*!
 * @brief This function returns a reference to member discharged_mah
 * @return Reference to member discharged_mah
 */
float& px4_msgs::msg::BatteryStatus::discharged_mah()
{
    return m_discharged_mah;
}

/*!
 * @brief This function sets a value in member remaining
 * @param _remaining New value for member remaining
 */
void px4_msgs::msg::BatteryStatus::remaining(float _remaining)
{
m_remaining = _remaining;
}

/*!
 * @brief This function returns the value of member remaining
 * @return Value of member remaining
 */
float px4_msgs::msg::BatteryStatus::remaining() const
{
    return m_remaining;
}

/*!
 * @brief This function returns a reference to member remaining
 * @return Reference to member remaining
 */
float& px4_msgs::msg::BatteryStatus::remaining()
{
    return m_remaining;
}

/*!
 * @brief This function sets a value in member scale
 * @param _scale New value for member scale
 */
void px4_msgs::msg::BatteryStatus::scale(float _scale)
{
m_scale = _scale;
}

/*!
 * @brief This function returns the value of member scale
 * @return Value of member scale
 */
float px4_msgs::msg::BatteryStatus::scale() const
{
    return m_scale;
}

/*!
 * @brief This function returns a reference to member scale
 * @return Reference to member scale
 */
float& px4_msgs::msg::BatteryStatus::scale()
{
    return m_scale;
}

/*!
 * @brief This function sets a value in member time_remaining_s
 * @param _time_remaining_s New value for member time_remaining_s
 */
void px4_msgs::msg::BatteryStatus::time_remaining_s(float _time_remaining_s)
{
m_time_remaining_s = _time_remaining_s;
}

/*!
 * @brief This function returns the value of member time_remaining_s
 * @return Value of member time_remaining_s
 */
float px4_msgs::msg::BatteryStatus::time_remaining_s() const
{
    return m_time_remaining_s;
}

/*!
 * @brief This function returns a reference to member time_remaining_s
 * @return Reference to member time_remaining_s
 */
float& px4_msgs::msg::BatteryStatus::time_remaining_s()
{
    return m_time_remaining_s;
}

/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void px4_msgs::msg::BatteryStatus::temperature(float _temperature)
{
m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
float px4_msgs::msg::BatteryStatus::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
float& px4_msgs::msg::BatteryStatus::temperature()
{
    return m_temperature;
}

/*!
 * @brief This function sets a value in member cell_count
 * @param _cell_count New value for member cell_count
 */
void px4_msgs::msg::BatteryStatus::cell_count(uint8_t _cell_count)
{
m_cell_count = _cell_count;
}

/*!
 * @brief This function returns the value of member cell_count
 * @return Value of member cell_count
 */
uint8_t px4_msgs::msg::BatteryStatus::cell_count() const
{
    return m_cell_count;
}

/*!
 * @brief This function returns a reference to member cell_count
 * @return Reference to member cell_count
 */
uint8_t& px4_msgs::msg::BatteryStatus::cell_count()
{
    return m_cell_count;
}

/*!
 * @brief This function sets a value in member source
 * @param _source New value for member source
 */
void px4_msgs::msg::BatteryStatus::source(uint8_t _source)
{
m_source = _source;
}

/*!
 * @brief This function returns the value of member source
 * @return Value of member source
 */
uint8_t px4_msgs::msg::BatteryStatus::source() const
{
    return m_source;
}

/*!
 * @brief This function returns a reference to member source
 * @return Reference to member source
 */
uint8_t& px4_msgs::msg::BatteryStatus::source()
{
    return m_source;
}

/*!
 * @brief This function sets a value in member priority
 * @param _priority New value for member priority
 */
void px4_msgs::msg::BatteryStatus::priority(uint8_t _priority)
{
m_priority = _priority;
}

/*!
 * @brief This function returns the value of member priority
 * @return Value of member priority
 */
uint8_t px4_msgs::msg::BatteryStatus::priority() const
{
    return m_priority;
}

/*!
 * @brief This function returns a reference to member priority
 * @return Reference to member priority
 */
uint8_t& px4_msgs::msg::BatteryStatus::priority()
{
    return m_priority;
}

/*!
 * @brief This function sets a value in member capacity
 * @param _capacity New value for member capacity
 */
void px4_msgs::msg::BatteryStatus::capacity(uint16_t _capacity)
{
m_capacity = _capacity;
}

/*!
 * @brief This function returns the value of member capacity
 * @return Value of member capacity
 */
uint16_t px4_msgs::msg::BatteryStatus::capacity() const
{
    return m_capacity;
}

/*!
 * @brief This function returns a reference to member capacity
 * @return Reference to member capacity
 */
uint16_t& px4_msgs::msg::BatteryStatus::capacity()
{
    return m_capacity;
}

/*!
 * @brief This function sets a value in member cycle_count
 * @param _cycle_count New value for member cycle_count
 */
void px4_msgs::msg::BatteryStatus::cycle_count(uint16_t _cycle_count)
{
m_cycle_count = _cycle_count;
}

/*!
 * @brief This function returns the value of member cycle_count
 * @return Value of member cycle_count
 */
uint16_t px4_msgs::msg::BatteryStatus::cycle_count() const
{
    return m_cycle_count;
}

/*!
 * @brief This function returns a reference to member cycle_count
 * @return Reference to member cycle_count
 */
uint16_t& px4_msgs::msg::BatteryStatus::cycle_count()
{
    return m_cycle_count;
}

/*!
 * @brief This function sets a value in member average_time_to_empty
 * @param _average_time_to_empty New value for member average_time_to_empty
 */
void px4_msgs::msg::BatteryStatus::average_time_to_empty(uint16_t _average_time_to_empty)
{
m_average_time_to_empty = _average_time_to_empty;
}

/*!
 * @brief This function returns the value of member average_time_to_empty
 * @return Value of member average_time_to_empty
 */
uint16_t px4_msgs::msg::BatteryStatus::average_time_to_empty() const
{
    return m_average_time_to_empty;
}

/*!
 * @brief This function returns a reference to member average_time_to_empty
 * @return Reference to member average_time_to_empty
 */
uint16_t& px4_msgs::msg::BatteryStatus::average_time_to_empty()
{
    return m_average_time_to_empty;
}

/*!
 * @brief This function sets a value in member serial_number
 * @param _serial_number New value for member serial_number
 */
void px4_msgs::msg::BatteryStatus::serial_number(uint16_t _serial_number)
{
m_serial_number = _serial_number;
}

/*!
 * @brief This function returns the value of member serial_number
 * @return Value of member serial_number
 */
uint16_t px4_msgs::msg::BatteryStatus::serial_number() const
{
    return m_serial_number;
}

/*!
 * @brief This function returns a reference to member serial_number
 * @return Reference to member serial_number
 */
uint16_t& px4_msgs::msg::BatteryStatus::serial_number()
{
    return m_serial_number;
}

/*!
 * @brief This function sets a value in member manufacture_date
 * @param _manufacture_date New value for member manufacture_date
 */
void px4_msgs::msg::BatteryStatus::manufacture_date(uint16_t _manufacture_date)
{
m_manufacture_date = _manufacture_date;
}

/*!
 * @brief This function returns the value of member manufacture_date
 * @return Value of member manufacture_date
 */
uint16_t px4_msgs::msg::BatteryStatus::manufacture_date() const
{
    return m_manufacture_date;
}

/*!
 * @brief This function returns a reference to member manufacture_date
 * @return Reference to member manufacture_date
 */
uint16_t& px4_msgs::msg::BatteryStatus::manufacture_date()
{
    return m_manufacture_date;
}

/*!
 * @brief This function sets a value in member state_of_health
 * @param _state_of_health New value for member state_of_health
 */
void px4_msgs::msg::BatteryStatus::state_of_health(uint16_t _state_of_health)
{
m_state_of_health = _state_of_health;
}

/*!
 * @brief This function returns the value of member state_of_health
 * @return Value of member state_of_health
 */
uint16_t px4_msgs::msg::BatteryStatus::state_of_health() const
{
    return m_state_of_health;
}

/*!
 * @brief This function returns a reference to member state_of_health
 * @return Reference to member state_of_health
 */
uint16_t& px4_msgs::msg::BatteryStatus::state_of_health()
{
    return m_state_of_health;
}

/*!
 * @brief This function sets a value in member max_error
 * @param _max_error New value for member max_error
 */
void px4_msgs::msg::BatteryStatus::max_error(uint16_t _max_error)
{
m_max_error = _max_error;
}

/*!
 * @brief This function returns the value of member max_error
 * @return Value of member max_error
 */
uint16_t px4_msgs::msg::BatteryStatus::max_error() const
{
    return m_max_error;
}

/*!
 * @brief This function returns a reference to member max_error
 * @return Reference to member max_error
 */
uint16_t& px4_msgs::msg::BatteryStatus::max_error()
{
    return m_max_error;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void px4_msgs::msg::BatteryStatus::id(uint8_t _id)
{
m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint8_t px4_msgs::msg::BatteryStatus::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint8_t& px4_msgs::msg::BatteryStatus::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member interface_error
 * @param _interface_error New value for member interface_error
 */
void px4_msgs::msg::BatteryStatus::interface_error(uint16_t _interface_error)
{
m_interface_error = _interface_error;
}

/*!
 * @brief This function returns the value of member interface_error
 * @return Value of member interface_error
 */
uint16_t px4_msgs::msg::BatteryStatus::interface_error() const
{
    return m_interface_error;
}

/*!
 * @brief This function returns a reference to member interface_error
 * @return Reference to member interface_error
 */
uint16_t& px4_msgs::msg::BatteryStatus::interface_error()
{
    return m_interface_error;
}

/*!
 * @brief This function copies the value in member voltage_cell_v
 * @param _voltage_cell_v New value to be copied in member voltage_cell_v
 */
void px4_msgs::msg::BatteryStatus::voltage_cell_v(const px4_msgs::msg::float__14 &_voltage_cell_v)
{
m_voltage_cell_v = _voltage_cell_v;
}

/*!
 * @brief This function moves the value in member voltage_cell_v
 * @param _voltage_cell_v New value to be moved in member voltage_cell_v
 */
void px4_msgs::msg::BatteryStatus::voltage_cell_v(px4_msgs::msg::float__14 &&_voltage_cell_v)
{
m_voltage_cell_v = std::move(_voltage_cell_v);
}

/*!
 * @brief This function returns a constant reference to member voltage_cell_v
 * @return Constant reference to member voltage_cell_v
 */
const px4_msgs::msg::float__14& px4_msgs::msg::BatteryStatus::voltage_cell_v() const
{
    return m_voltage_cell_v;
}

/*!
 * @brief This function returns a reference to member voltage_cell_v
 * @return Reference to member voltage_cell_v
 */
px4_msgs::msg::float__14& px4_msgs::msg::BatteryStatus::voltage_cell_v()
{
    return m_voltage_cell_v;
}
/*!
 * @brief This function sets a value in member max_cell_voltage_delta
 * @param _max_cell_voltage_delta New value for member max_cell_voltage_delta
 */
void px4_msgs::msg::BatteryStatus::max_cell_voltage_delta(float _max_cell_voltage_delta)
{
m_max_cell_voltage_delta = _max_cell_voltage_delta;
}

/*!
 * @brief This function returns the value of member max_cell_voltage_delta
 * @return Value of member max_cell_voltage_delta
 */
float px4_msgs::msg::BatteryStatus::max_cell_voltage_delta() const
{
    return m_max_cell_voltage_delta;
}

/*!
 * @brief This function returns a reference to member max_cell_voltage_delta
 * @return Reference to member max_cell_voltage_delta
 */
float& px4_msgs::msg::BatteryStatus::max_cell_voltage_delta()
{
    return m_max_cell_voltage_delta;
}

/*!
 * @brief This function sets a value in member is_powering_off
 * @param _is_powering_off New value for member is_powering_off
 */
void px4_msgs::msg::BatteryStatus::is_powering_off(bool _is_powering_off)
{
m_is_powering_off = _is_powering_off;
}

/*!
 * @brief This function returns the value of member is_powering_off
 * @return Value of member is_powering_off
 */
bool px4_msgs::msg::BatteryStatus::is_powering_off() const
{
    return m_is_powering_off;
}

/*!
 * @brief This function returns a reference to member is_powering_off
 * @return Reference to member is_powering_off
 */
bool& px4_msgs::msg::BatteryStatus::is_powering_off()
{
    return m_is_powering_off;
}

/*!
 * @brief This function sets a value in member is_required
 * @param _is_required New value for member is_required
 */
void px4_msgs::msg::BatteryStatus::is_required(bool _is_required)
{
m_is_required = _is_required;
}

/*!
 * @brief This function returns the value of member is_required
 * @return Value of member is_required
 */
bool px4_msgs::msg::BatteryStatus::is_required() const
{
    return m_is_required;
}

/*!
 * @brief This function returns a reference to member is_required
 * @return Reference to member is_required
 */
bool& px4_msgs::msg::BatteryStatus::is_required()
{
    return m_is_required;
}

/*!
 * @brief This function sets a value in member faults
 * @param _faults New value for member faults
 */
void px4_msgs::msg::BatteryStatus::faults(uint16_t _faults)
{
m_faults = _faults;
}

/*!
 * @brief This function returns the value of member faults
 * @return Value of member faults
 */
uint16_t px4_msgs::msg::BatteryStatus::faults() const
{
    return m_faults;
}

/*!
 * @brief This function returns a reference to member faults
 * @return Reference to member faults
 */
uint16_t& px4_msgs::msg::BatteryStatus::faults()
{
    return m_faults;
}

/*!
 * @brief This function sets a value in member custom_faults
 * @param _custom_faults New value for member custom_faults
 */
void px4_msgs::msg::BatteryStatus::custom_faults(uint32_t _custom_faults)
{
m_custom_faults = _custom_faults;
}

/*!
 * @brief This function returns the value of member custom_faults
 * @return Value of member custom_faults
 */
uint32_t px4_msgs::msg::BatteryStatus::custom_faults() const
{
    return m_custom_faults;
}

/*!
 * @brief This function returns a reference to member custom_faults
 * @return Reference to member custom_faults
 */
uint32_t& px4_msgs::msg::BatteryStatus::custom_faults()
{
    return m_custom_faults;
}

/*!
 * @brief This function sets a value in member warning
 * @param _warning New value for member warning
 */
void px4_msgs::msg::BatteryStatus::warning(uint8_t _warning)
{
m_warning = _warning;
}

/*!
 * @brief This function returns the value of member warning
 * @return Value of member warning
 */
uint8_t px4_msgs::msg::BatteryStatus::warning() const
{
    return m_warning;
}

/*!
 * @brief This function returns a reference to member warning
 * @return Reference to member warning
 */
uint8_t& px4_msgs::msg::BatteryStatus::warning()
{
    return m_warning;
}

/*!
 * @brief This function sets a value in member mode
 * @param _mode New value for member mode
 */
void px4_msgs::msg::BatteryStatus::mode(uint8_t _mode)
{
m_mode = _mode;
}

/*!
 * @brief This function returns the value of member mode
 * @return Value of member mode
 */
uint8_t px4_msgs::msg::BatteryStatus::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
uint8_t& px4_msgs::msg::BatteryStatus::mode()
{
    return m_mode;
}

/*!
 * @brief This function sets a value in member average_power
 * @param _average_power New value for member average_power
 */
void px4_msgs::msg::BatteryStatus::average_power(float _average_power)
{
m_average_power = _average_power;
}

/*!
 * @brief This function returns the value of member average_power
 * @return Value of member average_power
 */
float px4_msgs::msg::BatteryStatus::average_power() const
{
    return m_average_power;
}

/*!
 * @brief This function returns a reference to member average_power
 * @return Reference to member average_power
 */
float& px4_msgs::msg::BatteryStatus::average_power()
{
    return m_average_power;
}

/*!
 * @brief This function sets a value in member available_energy
 * @param _available_energy New value for member available_energy
 */
void px4_msgs::msg::BatteryStatus::available_energy(float _available_energy)
{
m_available_energy = _available_energy;
}

/*!
 * @brief This function returns the value of member available_energy
 * @return Value of member available_energy
 */
float px4_msgs::msg::BatteryStatus::available_energy() const
{
    return m_available_energy;
}

/*!
 * @brief This function returns a reference to member available_energy
 * @return Reference to member available_energy
 */
float& px4_msgs::msg::BatteryStatus::available_energy()
{
    return m_available_energy;
}

/*!
 * @brief This function sets a value in member full_charge_capacity_wh
 * @param _full_charge_capacity_wh New value for member full_charge_capacity_wh
 */
void px4_msgs::msg::BatteryStatus::full_charge_capacity_wh(float _full_charge_capacity_wh)
{
m_full_charge_capacity_wh = _full_charge_capacity_wh;
}

/*!
 * @brief This function returns the value of member full_charge_capacity_wh
 * @return Value of member full_charge_capacity_wh
 */
float px4_msgs::msg::BatteryStatus::full_charge_capacity_wh() const
{
    return m_full_charge_capacity_wh;
}

/*!
 * @brief This function returns a reference to member full_charge_capacity_wh
 * @return Reference to member full_charge_capacity_wh
 */
float& px4_msgs::msg::BatteryStatus::full_charge_capacity_wh()
{
    return m_full_charge_capacity_wh;
}

/*!
 * @brief This function sets a value in member remaining_capacity_wh
 * @param _remaining_capacity_wh New value for member remaining_capacity_wh
 */
void px4_msgs::msg::BatteryStatus::remaining_capacity_wh(float _remaining_capacity_wh)
{
m_remaining_capacity_wh = _remaining_capacity_wh;
}

/*!
 * @brief This function returns the value of member remaining_capacity_wh
 * @return Value of member remaining_capacity_wh
 */
float px4_msgs::msg::BatteryStatus::remaining_capacity_wh() const
{
    return m_remaining_capacity_wh;
}

/*!
 * @brief This function returns a reference to member remaining_capacity_wh
 * @return Reference to member remaining_capacity_wh
 */
float& px4_msgs::msg::BatteryStatus::remaining_capacity_wh()
{
    return m_remaining_capacity_wh;
}

/*!
 * @brief This function sets a value in member design_capacity
 * @param _design_capacity New value for member design_capacity
 */
void px4_msgs::msg::BatteryStatus::design_capacity(float _design_capacity)
{
m_design_capacity = _design_capacity;
}

/*!
 * @brief This function returns the value of member design_capacity
 * @return Value of member design_capacity
 */
float px4_msgs::msg::BatteryStatus::design_capacity() const
{
    return m_design_capacity;
}

/*!
 * @brief This function returns a reference to member design_capacity
 * @return Reference to member design_capacity
 */
float& px4_msgs::msg::BatteryStatus::design_capacity()
{
    return m_design_capacity;
}

/*!
 * @brief This function sets a value in member average_time_to_full
 * @param _average_time_to_full New value for member average_time_to_full
 */
void px4_msgs::msg::BatteryStatus::average_time_to_full(uint16_t _average_time_to_full)
{
m_average_time_to_full = _average_time_to_full;
}

/*!
 * @brief This function returns the value of member average_time_to_full
 * @return Value of member average_time_to_full
 */
uint16_t px4_msgs::msg::BatteryStatus::average_time_to_full() const
{
    return m_average_time_to_full;
}

/*!
 * @brief This function returns a reference to member average_time_to_full
 * @return Reference to member average_time_to_full
 */
uint16_t& px4_msgs::msg::BatteryStatus::average_time_to_full()
{
    return m_average_time_to_full;
}

/*!
 * @brief This function sets a value in member over_discharge_count
 * @param _over_discharge_count New value for member over_discharge_count
 */
void px4_msgs::msg::BatteryStatus::over_discharge_count(uint16_t _over_discharge_count)
{
m_over_discharge_count = _over_discharge_count;
}

/*!
 * @brief This function returns the value of member over_discharge_count
 * @return Value of member over_discharge_count
 */
uint16_t px4_msgs::msg::BatteryStatus::over_discharge_count() const
{
    return m_over_discharge_count;
}

/*!
 * @brief This function returns a reference to member over_discharge_count
 * @return Reference to member over_discharge_count
 */
uint16_t& px4_msgs::msg::BatteryStatus::over_discharge_count()
{
    return m_over_discharge_count;
}

/*!
 * @brief This function sets a value in member nominal_voltage
 * @param _nominal_voltage New value for member nominal_voltage
 */
void px4_msgs::msg::BatteryStatus::nominal_voltage(float _nominal_voltage)
{
m_nominal_voltage = _nominal_voltage;
}

/*!
 * @brief This function returns the value of member nominal_voltage
 * @return Value of member nominal_voltage
 */
float px4_msgs::msg::BatteryStatus::nominal_voltage() const
{
    return m_nominal_voltage;
}

/*!
 * @brief This function returns a reference to member nominal_voltage
 * @return Reference to member nominal_voltage
 */
float& px4_msgs::msg::BatteryStatus::nominal_voltage()
{
    return m_nominal_voltage;
}


size_t px4_msgs::msg::BatteryStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;











































    return current_align;
}

bool px4_msgs::msg::BatteryStatus::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::BatteryStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}


